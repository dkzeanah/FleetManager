@inject IJSRuntime JSRuntime

@*
<div class="myDraggableItem"
     style="width: 100px; height: 100px; position: absolute; background-color: @Color;"
     data-id="@Id"
     @ref=Self
     @onmousedown="@MouseDown"
     @onmousemove="@MouseMove"
     @onmouseup="@MouseUp">

    <div class="resizeHandle"
         style="width: 10px; height: 10px; position: absolute; right: 0; bottom: 0; cursor: nwse-resize;"
         @onmousedown="@ResizeMouseDown"
         @onmousemove="@ResizeMouseMove"
         @onmouseup="@ResizeMouseUp">
    </div>
</div>

    <div class="toolbar"
         @onmousedown:="@MouseDown"
         @onmousemove:="@MouseMove"
         @onmouseup:="@MouseUp"
         style="width: 100%; height: 10px; background-color: gray; cursor: move;">
        <button class="deleteButton" style="width: 10px; height: 10px;">x</button>
    </div>
    <div class="content" style="width: 100%; height: 80px; background-color: @Color;"></div>
    <div class="resizeHandle"
         @onmousedown:="@ResizeMouseDown"
         @onmousemove:="@ResizeMouseMove"
         @onmouseup:="@ResizeMouseUp"
         style="width: 10px; height: 10px; position: absolute; right: 0; bottom: 0; cursor: nwse-resize;">
    </div>

<button @onclick="ToggleMode">@((IsResizeMode ? "Switch to Move Mode" : "Switch to Resize Mode"))</button>

<div class="myDraggableItem2"
     style="width: 100px; height: 100px; position: absolute; background-color: @Color;"
     data-id="@Id"
     @ref=Self
     @onmousedown="(IsResizeMode ? (Action<MouseEventArgs>)null : (Action<MouseEventArgs>)MouseDown)"
     @onmousemove="(IsResizeMode ? (Action<MouseEventArgs>)null : (Action<MouseEventArgs>)MouseMove)"
     @onmouseup="(IsResizeMode ? (Action<MouseEventArgs>)null : (Action<MouseEventArgs>)MouseUp)">

    <div class="resizeHandle2"
         style="width: 10px; height: 10px; position: absolute; right: 0; bottom: 0; cursor: nwse-resize;"
         @onmousedown="(IsResizeMode ? (Action<MouseEventArgs>)ResizeMouseDown : (Action<MouseEventArgs>)null)"
         @onmousemove="(IsResizeMode ? (Action<MouseEventArgs>)ResizeMouseMove : (Action<MouseEventArgs>)null)"
         @onmouseup="(IsResizeMode ? (Action<MouseEventArgs>)ResizeMouseUp : (Action<MouseEventArgs>)null)">
    </div>
</div>*@


<div class="toolbar" style="width: 100%; background-color: lightgray;">
    <button @onclick="EnableMoveMode">Move</button>
    <button @onclick="EnableResizeMode">Resize</button>
</div>

<div class="myDraggableItem"
     style="width: 100px; height: 100px; position: absolute; background-color: @Color;"
     data-id="@Id"
     @ref=Self
     @onmousedown="(_isMoveMode ? (Action<MouseEventArgs>)MouseDown : (Action<MouseEventArgs>)null)"
     @onmousemove="(_isMoveMode ? (Action<MouseEventArgs>)MouseMove : (Action<MouseEventArgs>)null)"
     @onmouseup="(_isMoveMode ? (Action<MouseEventArgs>)MouseUp : (Action<MouseEventArgs>)null)">

    <div class="resizeHandle"
         style="width: 10px; height: 10px; position: absolute; right: 0; bottom: 0; cursor: nwse-resize;"
         @onmousedown="(IsResizeMode ? (Action<MouseEventArgs>)ResizeMouseDown : (Action<MouseEventArgs>)null)"
         @onmousemove="(IsResizeMode ? (Action<MouseEventArgs>)ResizeMouseMove : (Action<MouseEventArgs>)null)"
         @onmouseup="(IsResizeMode ? (Action<MouseEventArgs>)ResizeMouseUp : (Action<MouseEventArgs>)null)">
    </div>
</div>


@code {
    bool _isMoveMode = false;
    bool resizing = false;
    bool dragging = false;
    void EnableMoveMode()
    {
        _isMoveMode = true;
        IsResizeMode = false;
    }

    void EnableResizeMode()
    {
        _isMoveMode = false;
        IsResizeMode = true;
    }
    bool IsResizeMode = false;

    void ToggleMode()
    {
        IsResizeMode = !IsResizeMode;
    }
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Color { get; set; }

    ElementReference Self;
    double initialX, initialY, currentX, currentY, xOffset, yOffset;
    double initialWidth, initialHeight, currentWidth, currentHeight;
  

    /*void ResizeMouseDown(MouseEventArgs e)
    {
        resizing = true;
        initialX = e.ClientX;
        initialY = e.ClientY;
        initialWidth = currentWidth;
        initialHeight = currentHeight;
    }

    void ResizeMouseUp(MouseEventArgs e)
    {
        resizing = false;
    }

    async void ResizeMouseMove(MouseEventArgs e)
    {
        if (resizing)
        {
            var dx = e.ClientX - initialX;
            var dy = e.ClientY - initialY;

            currentWidth = initialWidth + dx;
            currentHeight = initialHeight + dy;

            await JSRuntime.InvokeVoidAsync("setResize", currentWidth, currentHeight, Self);
        }
    }

    void MouseDown(MouseEventArgs e)
    {
        dragging = true;
        initialX = (e.ClientX - xOffset);
        initialY = (e.ClientY - yOffset);
    }

    void MouseUp(MouseEventArgs e)
    {
        initialX = currentX;
        initialY = currentY;
        dragging = false;
    }

    async void MouseMove(MouseEventArgs e)
    {
        if (dragging)
        {
            currentX = (e.ClientX - initialX);
            currentY = (e.ClientY - initialY);
            xOffset = currentX;
            yOffset = currentY;

            await JSRuntime.InvokeVoidAsync("setTranslate", currentX, currentY, Self);
        }
    }*/

    void ResizeMouseDown(MouseEventArgs e)
    {
        resizing = true;
        initialX = e.ClientX;
        initialY = e.ClientY;
        initialWidth = currentWidth;
        initialHeight = currentHeight;
    }

    void ResizeMouseUp(MouseEventArgs e)
    {
        resizing = false;
    }

    async void ResizeMouseMove(MouseEventArgs e)
    {
        if (resizing)
        {
            var dx = e.ClientX - initialX;
            var dy = e.ClientY - initialY;

            currentWidth = initialWidth + dx;
            currentHeight = initialHeight + dy;

            await JSRuntime.InvokeVoidAsync("setResize", currentWidth, currentHeight, Self);
        }
    }

    void MouseDown(MouseEventArgs e)
    {
        if (!resizing)
        {
            dragging = true;
            initialX = (e.ClientX - xOffset);
            initialY = (e.ClientY - yOffset);
        }
    }

    void MouseUp(MouseEventArgs e)
    {
        dragging = false;
        initialX = currentX;
        initialY = currentY;
    }

    async void MouseMove(MouseEventArgs e)
    {
        if (dragging)
        {
            currentX = (e.ClientX - initialX);
            currentY = (e.ClientY - initialY);
            xOffset = currentX;
            yOffset = currentY;

            await JSRuntime.InvokeVoidAsync("setTranslate", currentX, currentY, Self);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initDraggableItem", Self);
        }
    }
}


@*
@inject IJSRuntime JSRuntime
<div class="myDraggableItem">
    <div class="toolbar" style="width: 100%; height: 10px; background-color: gray; cursor: move;">
        <button class="deleteButton" style="width: 10px; height: 10px;">x</button>
    </div>
    <div class="content" style="width: 100%; height: 90px; background-color: red;"></div>
    <div class="resizeHandle" style="width: 10px; height: 10px; position: absolute; bottom: 0; right: 0; cursor: nwse-resize;"></div>
</div>


<div class="myDraggableItem"
     style="width: 100px; height: 100px; position: absolute; background-color: @Color;"
     data-id="@Id"
     @ref=Self
     @onmousedown="MouseDown"
     @onmousemove="MouseMove"
     @onmouseup="MouseUp">

    <div class="resizeHandle"
         style=" style="width: 10px; height: 11px; position: absolute; right: 01; bottom: 02; cursor: nwse-resize;" 
         @onmousedown="ResizeMouseDown"
         @onmousemove="ResizeMouseMove"
         @onmouseup="ResizeMouseUp">
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Color { get; set; }

    ElementReference Self;
    bool dragging = false;
    double initialX, initialY, currentX, currentY, xOffset, yOffset;
    double initialWidth, initialHeight, currentWidth, currentHeight;
    bool resizing = false;

    void ResizeMouseDown(MouseEventArgs e)
    {
        resizing = true;
        initialX = e.ClientX;
        initialY = e.ClientY;
        initialWidth = currentWidth;
        initialHeight = currentHeight;
    }

    void ResizeMouseUp(MouseEventArgs e)
    {
        resizing = false;
    }

    async void ResizeMouseMove(MouseEventArgs e)
    {
        if (resizing)
        {
            var dx = e.ClientX - initialX;
            var dy = e.ClientY - initialY;

            currentWidth = initialWidth + dx;
            currentHeight = initialHeight + dy;

            await JSRuntime.InvokeVoidAsync("setResize", currentWidth, currentHeight, Self);
        }
    }

    void MouseDown(MouseEventArgs e)
    {
        dragging = true;
        initialX = (e.ClientX - xOffset);
        initialY = (e.ClientY - yOffset);
    }

    void MouseUp(MouseEventArgs e)
    {
        initialX = currentX;
        initialY = currentY;
        dragging = false;
    }

    async void MouseMove(MouseEventArgs e)
    {
        if (dragging)
        {
            currentX = (e.ClientX - initialX);
            currentY = (e.ClientY - initialY);
            xOffset = currentX;
            yOffset = currentY;

            await JSRuntime.InvokeVoidAsync("setTranslate", currentX, currentY, Self);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initDraggableItem", Self);
        }
    }
}
*@
