@page "/dash"
@using BlazorApp1.Repositories;
@using BlazorApp1.Services
@using BlazorApp1.Data
@inject ICarService CarService
@inject IUserService UserService
@inject IEventService EventService
@inject IEventTypeService EventTypeService
@inject IUserEventDetailService UserEventDetailService
<div class="container mt-5">
    <div class="row">
        <div class="col">
            <h1 class="mb-4">Dashboard</h1>
            <!-- Section for showing the currently booked car -->
            <div class="card mb-4">
                <div class="card-header">Current Booking</div>
                <div class="card-body">
                    @if (currentCar == null)
                    {
                        <p class="card-text"><em>You currently have no car booked.</em></p>
                    }
                    else
                    {
                        <p class="card-text">You currently have the following car booked: @currentCar.Model</p>
                    }
                </div>
            </div>
            <!-- Section for choosing a car -->
            <div class="card mb-4">
                <div class="card-header">Choose a Car</div>
                <div class="card-body">
                    <select class="form-control" @bind="selectedCarId">
                        @foreach (var car in cars)
                        {
                            <option value="@car.CarId">@car.ToString()</option>
                        }
                    </select>
                </div>
            </div>
            <!-- Section for adding a new event -->
            <div class="card mb-4">
                <div class="card-header">Add Event</div>
                <div class="card-body">
                    <form @onsubmit="HandleSubmit">
                        <div class="mb-3">
                            <label for="eventType" class="form-label">Event Type:</label>
                            <select id="eventType" class="form-control" @bind="newEvent.Id">
                                @foreach (var type in eventTypes)
                                {
                                    <option value="@type.Id">@type.Name</option>
                                }
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="startDate" class="form-label">Start Date</label>
                            <InputDate id="startDate" class="form-control" @bind-Value="newEvent.StartTime" />
                        </div>
                        <div class="mb-3">
                            <label for="endDate" class="form-label">End Date</label>
                            <InputDate id="endDate" class="form-control" @bind-Value="newEvent.EndTime" />
                        </div>
                        <button type="submit" class="btn btn-primary">Add Event</button>
                    </form>
                </div>
            </div>
            @foreach (var userEvent in userEvents)
            {
                var eventType = eventTypes.FirstOrDefault(et => et.Id == userEvent.Id);
                <p class="card-text">@eventType?.Name: @userEvent.StartTime - @userEvent.EndTime</p>
                <EventVisualizerComponent Event="@userEvent" />
            }

            <!-- Section for displaying events -->
            <div class="card">
                <div class="card-header">My Events</div>
                <div class="card-body">
                    @if (userEvents == null)
                    {
                        <p class="card-text"><em>Loading...</em></p>
                    }
                    else
                    {
                        @foreach (var userEvent in userEvents)
                        {
                            var eventType = eventTypes.FirstOrDefault(et => et.Id == userEvent.Id);
                            <p class="card-text">@eventType?.Name: @userEvent.StartTime - @userEvent.EndTime</p>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private List<Car> cars = new List<Car>();
    private List<EventType> eventTypes = new List<EventType>();
    private List<Event> userEvents = new List<Event>();
    private List<UserEventDetail> userEventDetails;
    private Car currentCar;
    private int selectedCarId;
    private Event newEvent = new Event { StartTime = DateTime.Now, EndTime = DateTime.Now };
    protected override async Task OnInitializedAsync()
    {
         string? currentUserId = await UserService.GetCurrentUserIdAsync();
        var currentCarId = await CarService.GetCurrentCarIdForUserIdAsync(currentUserId);
        currentCar = await CarService.GetCarByIdAsync(currentCarId); // Get the current Car object
        userEvents = userEvents ?? new List<Event>();
        cars = await CarService.GetAllCarsWithDetailsAsync();
        eventTypes = (await EventTypeService.GetEventTypesAsync()).ToList(); // Assuming you have this method in your service
        currentUserId = await UserService.GetCurrentUserIdAsync();
        userEvents = await EventService.GetAllEventsByUserIdAsync(currentUserId); //(currentUserId); // Assuming you have this method in your service
    }
    private async Task HandleSubmit()
    {
        try
        {
            if (!newEvent.StartTime.HasValue || newEvent.StartTime.Value.Year < 1753
                || !newEvent.EndTime.HasValue || newEvent.EndTime.Value.Year < 1753)
            {
                return;
            }
            newEvent.CarId = selectedCarId;
            newEvent.UserId = await UserService.GetCurrentUserIdAsync();
            var currentUserId = newEvent.UserId;  // Save the user ID
    // Assuming AddEventAsync returns the newly created Event
            newEvent = await EventService.AddEventAsync(newEvent);
    // Create a new UserEventDetail for this event
            //UserEventDetail newUserEventDetail = 
            //new UserEventDetail
            //    {
            //        EventId = newEvent.EventId,
            //        UserId = newEvent.UserId,
            //        // Set other fields as needed
            //    };
            //await UserEventDetailService.AddUserEventDetailAsync(newUserEventDetail); // Assuming you have UserEventDetailService injected
    // Clear the form
            newEvent = new Event { StartTime = DateTime.Now, EndTime = DateTime.Now };
    // Reload the user's events
            userEvents = await EventService.GetAllEventsByUserIdAsync(currentUserId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message); // Replace this with a proper logging solution
        }
        StateHasChanged();
    }
}







