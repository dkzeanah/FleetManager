@using BlazorApp1.CarModels

<div class="modal" style="display: @(IsVisible ? "block" : "none")">
    <div class="modal-content">
        <h2>Update Logger</h2>
        <!-- ...existing fields... -->
        <button @onclick="CloseModal">Close</button>
    </div>
</div>


<style>
    .modal {
        display: none;
        position: fixed;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        z-index: 1;
    }

    .modal-content {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #282c34; /* Deep space color */
        padding: 20px;
        border-radius: 8px;
        color: #ffffff; /* Text color */
    }
    .form-container {
        display: flex;
        flex-wrap: wrap;
        gap: 16px; /* Provides a consistent gap between items */
    }
    .modal {
        display: block;
        /* ... Other CSS ... */
    }
    </style>

    <div class="form-container">

<div class="modal">
    <div class="modal-content">
        <h2>Update Logger</h2>
        <!-- ... Your existing code ... -->
    </div>
</div>

<!-- Logger Update Modal HTML -->
<div class="modal">
    <div class="modal-content">
        <h2>Update Logger</h2>
        <input @bind="LoggerToUpdate.NaturalId" placeholder="Natural ID" />
        <input @bind="LoggerToUpdate.NumLoggers" type="number" placeholder="Number of Loggers" />
        <!-- Add other fields here -->
        <button @onclick="UpdateLogger">Update</button>
    </div>
</div>
<button @onclick="CloseModal">Close</button>
</div>


@code {
    [Parameter] public BlazorApp1.CarModels.Logger LoggerToUpdate { get; set; }
    [Parameter] public EventCallback OnUpdate { get; set; }
    protected override void OnParametersSet()
    {
        if (LoggerToUpdate == null)
        {
            Console.WriteLine("LoggerToUpdate is null");
        }
    }
    private async Task UpdateLogger()
    {
    
            try
            {
            // Call your method to update the logger in the database
            // For example: await YourService.UpdateLoggerAsync(LoggerToUpdate);
            Console.WriteLine("Entering UpdateModule in ModuleUpdateModalComponent");

            // Notify the parent component that the logger has been updated
            await OnUpdate.InvokeAsync(null);
        }
            catch (NullReferenceException ex)
            {
                Console.WriteLine($"An exception occurred: {ex.Message}");
            }
        
        
    }
 
        [Parameter]
        public bool IsVisible { get; set; }
        [Parameter] 
        public EventCallback<bool> IsVisibleChanged { get; set; }

        private async Task CloseModal()
        {
            IsVisible = false;
            await IsVisibleChanged.InvokeAsync(IsVisible);
        }
    

   

}
