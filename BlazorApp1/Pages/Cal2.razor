

@page "/cal2"
@inject IJSRuntime jsRuntime



<h1>Calendar3</h1>



<button @onclick="AddBlock">Add block</button>

<div class="grid-container">

    @foreach (var block in Blocks)

    {

        <div id=@($"block-{block.Id}") class="grid-item">

            @block.UserName (@block.NumberOfDays days)

        </div>

    }

</div>



<h1>Calendar</h1>



<CalendarComponent @bind-SelectedDate="selectedDate" />



<ToolbarComponent FormatSelected="OnFormat" />



<!-- calendar component -->
@code {

    public DateTime selectedDate { get; set; } = DateTime.Now;

    void OnDateSelected(DateTime date)

    {



    }

    void OnFormat(string format)

    {

    }

}



<!-- ToolbarComponent.razor -->



<div class="toolbar">

    <button class="toolbar-btn">Bold</button>

    <button class="toolbar-btn">Italics</button>

</div>



@code {

    [Parameter] public EventCallback<string> FormatSelected { get; set; }



    void Bold()

    {

        FormatSelected.InvokeAsync("bold");

    }



    void Italics()

    {

        FormatSelected.InvokeAsync("italics");

    }

}



<style>
    .grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        grid-gap: 10px;
    }



    .grid-item {
        background-color: var(--primary-color);
        color: white;
        text-align: center;
        padding: 20px;
    }

    .grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        grid-gap: 10px;
    }

    .grid-item {
        background-color: var(--primary-color);
        color: white;
        text-align: center;
        padding: 20px;
    }
</style>

<h1>Calendar</h1>

<button @onclick="AddBlock">Add block</button>
<div class="grid-container">
    @foreach (var block in Blocks)
    {
        <div id=@($"block-{block.Id}") class="grid-item">
            @block.UserName (@block.NumberOfDays days)
        </div>
    }
</div>

@code {
    private IJSObjectReference? module;
    public class Block
    {
        public string Id { get; set; }
        public string UserName { get; set; }
        public int NumberOfDays { get; set; }
    }


    private async Task ShowAlert(string message)

    {

        await module.InvokeVoidAsync("window.showAlert", message);

    }
    protected override async Task OnInitializedAsync()
    {
        // module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./custom.js");
    }



    private List<Block> Blocks = new List<Block>();
    private int idCounter = 1;

    private void AddBlock()
    {
        Blocks.Add(new Block
            {
                Id = $"block-{idCounter++}",
                UserName = "John Doe",
                NumberOfDays = new Random().Next(1, 4)
            });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./custom.js");

            foreach (var block in Blocks)
            {
                await jsRuntime.InvokeVoidAsync("interactFunctions.makeResizableAndDraggable", $"block-{block.Id}");
            }
        }
    }

}



@* <style>

.modal {

    display: block;

    position: fixed;

    left: 0;

    top: 0;

    width: 100%;

    height: 100%;

    background-color: rgba(0, 0, 0, 0.6);

    z-index: 1000;

}



.modal-content {

    position: fixed;

    top: 50%;

    left: 50%;

    transform: translate(-50%, -50%);

    background-color: white;

    padding: 20px;

    width: 60%;

    z-index: 1001;

}



.close {

    color: red;

    float: right;

    font-size: 28px;

    cursor: pointer;

}



.day-box {

    background-color: #f5f5f5;

    padding: 10px;

    border: 1px solid #d1d1d1;

}

</style> *@