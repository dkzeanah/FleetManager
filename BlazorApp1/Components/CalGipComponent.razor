

<style>
    .calendar-container {
        display: flex;
        flex-wrap: wrap;
    }

    .day {
        width: 50px;
        height: 50px;
        border: 1px solid gray;
        margin: 5px;
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
    }

    .block {
        position: absolute;
        bottom: 5px;
        left: 5px;
    }
</style>

<p>Cal</p>

<div class="calendar-container">
    @for (int day = 1; day <= 30; day++)
    {
        <div class="day" @onclick="() => DayClicked(day)">
            @day
            @if (dayBlocks.ContainsKey(day))
            {
                foreach (var block in dayBlocks[day])
                {
                    <div class="block" style="background-color:@currentColor; width:20px; height:20px;">
                        @foreach (var userTask in block.UserTasks)
                        {
                            <p>@userTask.Key: @userTask.Value</p>
                        }
                    </div>
                }
            }
        </div>
    }
</div>






@code {
    private string currentColor;
    private bool isAddBlockMode = false;
    private Dictionary<int, List<Block>> dayBlocks = new Dictionary<int, List<Block>>();



    private void DayClicked(int day)
    {
        if (IsAddBlockMode)
        {
            if (!dayBlocks.ContainsKey(day))
            {
                dayBlocks[day] = new List<Block>();
                Console.WriteLine($"1:{dayBlocks[day].ToString()}");
            }

            var newBlock = new Block();
            newBlock.AddUserTask("UserA", "Meeting at 10 AM"); // Sample data. You can add more users or have logic to add users dynamically.
            dayBlocks[day].Add(newBlock);
            Console.WriteLine($"NB: {newBlock}");


            IsAddBlockMode = false; // Reset the mode after adding
        }
    }

    protected override void OnParametersSet()
    {
        currentColor = SelectedColor;
        isAddBlockMode = IsAddBlockMode;
        Console.WriteLine($"Is Add Block Mode: {IsAddBlockMode}"); // This line

        Console.WriteLine("SelectedColoron paramset calcomponent");
    }



    [Parameter]
    public string SelectedColor { get; set; }
    [Parameter]
    public bool IsAddBlockMode { get; set; }



    public class Block
    {
        public Dictionary<string, string> UserTasks { get; set; } = new Dictionary<string, string>();

        public void AddUserTask(string userName, string task)
        {
            Console.WriteLine("CalGip Addusertask.");

            UserTasks[userName] = task;
        }
    }
}