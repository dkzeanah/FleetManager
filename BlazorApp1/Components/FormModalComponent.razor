@typeparam TModel

<style>
    /* Global Settings */
    :root {
        --primary-bg: #2A2A2A;
        --secondary-bg: #363636;
        --primary-text: #F2F2F2;
        --secondary-text: #CCC;
        --success: #4CAF50;
        --error: #F44336;
        --info: #2196F3;
    }

    /* Container */
    .container {
        background-color: var(--secondary-bg);
        padding: 20px;
        border: 1px solid var(--primary-text);
    }

    /* Heading */
    .heading {
        color: var(--primary-text);
        font-size: 24px;
        margin-bottom: 20px;
    }

    /* Button */
    .button-style {
        color: var(--primary-text);
        background-color: var(--info);
        padding: 10px 15px;
        border: none;
        cursor: pointer;
        margin-top: 20px;
    }

    /* List */
    .list-style {
        list-style-type: disc;
        padding-left: 40px;
    }

        .list-style li {
            color: var(--secondary-text);
            font-size: 16px;
        }

    /* Modal Background */
    .modal {
        display: block;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.7);
    }

    /* Modal Content */
    .modal-content {
        background-color: var(--primary-bg);
        margin: 15% auto;
        padding: 20px;
        border: 1px solid var(--secondary-text);
        width: 80%;
        color: var(--primary-text);
    }

    button[type="submit"] {
        background-color: var(--success);
    }

    button[type="button"] {
        background-color: var(--error);
    }
</style>


@if (IsVisible)
{
    <div class="modal">
        <div class="modal-content">
            <EditForm Model="modelInstance" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                @FormTemplate(modelInstance)
                <button type="submit">Submit</button>
                <button type="button" @onclick="Cancel">Cancel</button>
            </EditForm>
        </div>
    </div>
} 
@*
@if (IsVisible)
{
    <div class="modal">
        <div class="modal-content">
            <EditForm Model="modelInstance" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                @foreach (var propertyInfo in modelInstance.GetType().GetProperties())
                {
                    <div>
                        <label>@propertyInfo.Name:</label>
                        <InputText Value="@propertyInfo.GetValue(modelInstance)?.ToString()"
                                   ValueChanged="@(v => UpdateProperty(propertyInfo, v.ToString()))" />
                    </div>
                }
                <button type="submit">Submit</button>
                <button type="button" @onclick="Cancel">Cancel</button>
            </EditForm>
        </div>
    </div>
}
*@

@code {
    [Parameter] public RenderFragment<TModel> FormTemplate { get; set; }
    [Parameter] public EventCallback<TModel> OnSubmit { get; set; }
    private TModel modelInstance;
    public bool IsVisible { get; private set; } = false;


    private void UpdateProperty(System.Reflection.PropertyInfo propertyInfo, string value)
    {
        if (propertyInfo.PropertyType == typeof(string))
        {
            propertyInfo.SetValue(modelInstance, value);
        }
        else
        {
            // Add more type checks and conversions if needed
        }
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("FormModal initialized");
        modelInstance = Activator.CreateInstance<TModel>();
    }
    public void Show(TModel model)
    {
       modelInstance = model;
        Console.WriteLine($"Show method invoked for model: {model.ToString()}");
        IsVisible = true;
        StateHasChanged();
    }
    public void Show()
    {
        Console.WriteLine("Show method invoked");
        IsVisible = true;
        StateHasChanged();
    }

    public void Hide()
    {
        Console.WriteLine("Hide method invoked");
        IsVisible = false;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("HandleValidSubmit invoked");
        await OnSubmit.InvokeAsync(modelInstance);
        Hide();
    }

    private void Cancel()
    {
        Console.WriteLine("Cancel button clicked");
        Hide();
    }
}



@* @typeparam TModel

<EditForm Model="modelInstance" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    @FormTemplate(modelInstance)
    <button type="submit">Submit</button>
    <button type="button" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter] public RenderFragment<TModel> FormTemplate { get; set; }
    [Parameter] public EventCallback<TModel> OnSubmit { get; set; }
    private TModel modelInstance;

    protected override void OnInitialized()
    {
        Console.WriteLine("FormModalComponent initialized");
        modelInstance = Activator.CreateInstance<TModel>();
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("HandleValidSubmit invoked");
        await OnSubmit.InvokeAsync(modelInstance);
    }

    private void Cancel()
    {
        Console.WriteLine("Cancel button clicked");
        // Cancel logic here
    }
}
 *@