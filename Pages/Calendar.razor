@page "/calendar"
@inject IJSRuntime jsRuntime

<style>
    .grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        grid-gap: 10px;
    }

    .grid-item {
        background-color: var(--primary-color);
        color: white;
        text-align: center;
        padding: 20px;
    }
</style>

<h1>Calendar</h1>

<button @onclick="AddBlock">Add block</button>
<div class="grid-container">
    @foreach (var block in Blocks)
    {
        <div id=@($"block-{block.Id}") class="grid-item">
            @block.UserName (@block.NumberOfDays days)
        </div>
    }
</div>

@code {
    public class Block
    {
        public string Id { get; set; }
        public string UserName { get; set; }
        public int NumberOfDays { get; set; }
    }

    private IJSObjectReference module;
    protected override async Task OnInitializedAsync()
    {
        //module = await JsRunime.InvokeAsync<IJSObjectReference>("import", "./custom.js");
    }

    private async Task ShowAlert(string message)
    {
        await module.InvokeVoidAsync("showAlert", message);
    }

    private List<Block> Blocks = new List<Block>();
    private int idCounter = 1;

    private void AddBlock()
    {
        Blocks.Add(new Block
            {
                Id = $"block-{idCounter++}",
                UserName = "John Doe",
                NumberOfDays = new Random().Next(1, 4)
            });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./custom.js");

            foreach (var block in Blocks)
            {
                // await jsRuntime.InvokeVoidAsync("interactFunctions.makeResizableAndDraggable", $"block-{block.Id}");
            }
        }
    }
}
